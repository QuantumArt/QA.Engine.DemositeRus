@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.Extensions.Primitives
@using Demosite.Infrastructure.TagHelpers
@using Demosite.Infrastructure
@using Demosite.Models.Pagination
@using System.IO

@model Demosite.Models.Pagination.PaginationViewModel


@if (Model.MaxValue > 1)
{
    <div class="pagination">
        <ul class="pagination__list">
            @if (Model.Current > 1)
            {
                <li class="page-item">
                    <a href="@GetPageUrl(Model.Current - 1)"
               class="page-link @(Model.IsMovePreviousAvailable ? string.Empty : "disabled")"
               aria-label="Previous">
                        <div class="pagination__arrow pagination__arrow--prev"></div>
                    </a>
                </li>
            }

            @for (var pageNumber = Model.MinValue; pageNumber <= Model.MaxValue; pageNumber++)
            {
                <li class="pagination__list-item @(pageNumber == Model.Current ? "pagination__list-item--current" : string.Empty)" aria-current="page">
                    <a href="@GetPageUrl(pageNumber)" class="page-link">
                        <span aria-hidden="true">@pageNumber</span>
                    </a>
                </li>
            }

            <li class="page-item">
                <a href="@GetPageUrl(Model.Current + 1)"
               class="page-link @(Model.IsMoveNextAvailable ? string.Empty : "disabled")"
               aria-label="Next"><div class="pagination__arrow pagination__arrow--next"></div></a>
            </li>
        </ul>
  </div>
   
}

@functions {
    public string GetPageUrl(int page)
    {
        if (page == Model.Current)
        {
            return "#";
        }

        return Model.BaseQuery
            .Add(Constants.BindNames.Pagination, page.ToString())
            .ToUriComponent();
    }
}
