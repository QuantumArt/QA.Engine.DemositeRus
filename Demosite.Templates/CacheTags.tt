<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Collections.Generic" 
#><#@ import namespace="System"
#><#@ import namespace="System.CodeDom"
#><#@ import namespace="System.CodeDom.Compiler"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Data.Linq"
#><#@ import namespace="System.Data.Linq.Mapping"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Data"
#><#@ import namespace="System.Data.SqlClient"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Xml.Linq"
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #><# var connectionString = "Initial Catalog=qa_demosite;Data Source=spbdevsql01\\dev;User ID=publishing;Password=QuantumartHost.SQL;";
	var fileName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
	var namespaceName = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");
	var list = new List<ContentDefinition>();
	var cmdText= "select * from [content]";
	DataTable data = new DataTable();
	using (SqlConnection con = new SqlConnection(connectionString))
	{
	    using (SqlCommand cmd = new SqlCommand(cmdText, con))
	    {
	        cmd.CommandType = CommandType.Text;
	        con.Open();
	
	        try
	        {
	             SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.CloseConnection);
	            data.Load(dr);
	        }
	        finally
	        {
	            con.Close();
	        }
	    }
	}

	foreach(DataRow row in data.Rows)
	{
		list.Add(new ContentDefinition 
		{
			Id = Convert.ToInt32(row["CONTENT_ID"]),
			Name = (string)row["CONTENT_NAME"],
			Description = System.Security.SecurityElement.Escape(Convert.ToString(row["DESCRIPTION"]) ??"").Replace("\n", " ").Replace("\r", " "),
			NetName = Convert.ToString(row["NET_CONTENT_NAME"]),
			SiteId = Convert.ToInt32(row["SITE_ID"]),
			Map = Convert.ToBoolean(row["MAP_AS_CLASS"])
		});
	}
#>
// Owners: Nikolay Karlov, Grigorenko Paul
// This code is generated by a template, so don't modify it.
// All changes will be discarded.
// Last generated: <#=DateTime.Now#>
// <#=fileName#>.cs

namespace <#=namespaceName#>
{
	using System.Linq;
    using QA.DotNetCore.Caching.Interfaces;
    using QA.DotNetCore.Engine.Persistent.Interfaces.Settings;

    /// <summary>
    /// Контентные версионные теги
    /// </summary>
	public static partial class <#=fileName#>
	{
<#	foreach(var def in list.Where(x => x.Map))
	{
#>		/// <summary>
        /// <#= def.Name#>
        /// <#= def.Description#>
		/// </summary>
        public static QPContent <#= def.NetName#> = new QPContent { Id = <#=def.Id#>, SiteId = <#=def.SiteId#>, Name = "<#= def.Name#>", NetName = "<#= def.NetName#>"};
<#
	}
#>
	}

	/// <summary>
	/// Утилиты для работы с кештегами
	/// </summary>
	public class CacheTagUtilities
	{
		readonly IQpContentCacheTagNamingProvider _qpContentCacheTagNamingProvider;
		readonly QpSettings _qpSettings;

		public CacheTagUtilities(IQpContentCacheTagNamingProvider qpContentCacheTagNamingProvider, QpSettings qpSettings)
		{
			_qpContentCacheTagNamingProvider = qpContentCacheTagNamingProvider;
			_qpSettings = qpSettings;
		}

		/// <summary>
		/// Преобразование тегов в массив
		/// </summary>
		public string[] Merge(params QPContent[] tags)
		{
			return tags.Select(c => _qpContentCacheTagNamingProvider.Get(c.Name, c.SiteId, _qpSettings.IsStage)).Where(t => t != null).ToArray();
		}
	}
	
    public class QPContent
    {
        public int Id { get; set; }
        public int SiteId { get; set; }
        public string Name { get; set; }
		public string NetName { get; set; }
    }
}
<#+
class ContentDefinition
{
	public int Id {get; set;}
	public int SiteId {get; set;}
	public string Name {get; set;}
	public string Description {get; set;}
	public string NetName {get; set;}
	public bool Map {get; set;}
}
#>
